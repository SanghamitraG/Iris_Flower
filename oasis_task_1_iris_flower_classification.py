# -*- coding: utf-8 -*-
"""Oasis_Task_1_Iris_Flower_Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15uA4wO7oFg2c-qzZ1n4cYtnqsfwI79y0

**OASIS** **INFOBYTE** - **Data Science Intern**

***Author - Rutuja Gaikwad***

## **"Task-1 : Iris Flowers Classification"**
"""

from google.colab import drive

drive.mount ('/content/drive')

import pandas as pd
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
import matplotlib as mpl
import matplotlib.pyplot as plt

data = pd.read_csv('/content/drive/MyDrive/Oasis_Datasets/Iris.csv')

data.head()

data.shape

data.describe()

data.plot(kind='box', subplots=True, layout=(5,5), sharex=False, sharey=False)
pyplot.show()

data.hist()
pyplot.show()

scatter_matrix(data)
pyplot.show()

array = data.values
X = array[:,0:4]
y = array[:,4]
X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)

data.drop(columns=['Id'], inplace=True)
data.head()

data.info()

data['Species'].value_counts()

data.isnull().sum()

colors = ['red','green','blue']
Species = ['Iris-virginica','Iris-versicolor','Iris-setosa']

for i in range(3):
  x = data[data['Species'] == Species[i]]
  plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'],c = colors[i],label = Species[i])
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.legend()

for i in range(3):
  x = data[data['Species'] == Species[i]]
  plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'],c = colors[i],label = Species[i])
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.legend()

for i in range(3):
  x = data[data['Species'] == Species[i]]
  plt.scatter(x['SepalLengthCm'], x['PetalWidthCm'],c = colors[i],label = Species[i])
plt.xlabel('Sepal Length')
plt.ylabel('Petal Width')
plt.legend()

for i in range(3):
  x = data[data['Species'] == Species[i]]
  plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'],c = colors[i],label = Species[i])
plt.xlabel('Sepal Length')
plt.ylabel('Petal Length')
plt.legend()

from sklearn.model_selection import train_test_split
X = data.drop(columns=['Species'])
Y = data['Species']
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=42)
print('Size of training data : ', len(X_train))
print('Size of testing data : ', len(X_test))

from sklearn.linear_model import LogisticRegression
LR_model = LogisticRegression()
LR_model.fit(X_train, y_train)

